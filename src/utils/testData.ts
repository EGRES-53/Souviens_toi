// Test data utilities for SOUVIENS_TOI application
import { supabase } from '../lib/supabase';

export interface TestUser {
  email: string;
  password: string;
  displayName: string;
}

export interface TestEvent {
  title: string;
  date: string;
  description: string;
  location?: string;
  precise_date: boolean;
}

export interface TestStory {
  title: string;
  content: string;
}

// Test user credentials
export const TEST_USER: TestUser = {
  email: 'test@souviens-toi.fr',
  password: 'TestPassword123!',
  displayName: 'Utilisateur Test'
};

// Sample events for testing
export const SAMPLE_EVENTS: TestEvent[] = [
  {
    title: 'Naissance de Grand-p√®re Pierre',
    date: '1920-03-15',
    description: 'Naissance de Pierre Dupont √† Lyon, France. Premier enfant de la famille.',
    location: 'Lyon, France',
    precise_date: true
  },
  {
    title: 'Mariage de Pierre et Marie',
    date: '1945-06-20',
    description: 'Mariage de Pierre Dupont et Marie Martin √† l\'√©glise Saint-Jean de Lyon.',
    location: '√âglise Saint-Jean, Lyon',
    precise_date: true
  },
  {
    title: 'Naissance de Papa Jean',
    date: '1950-12-10',
    description: 'Naissance de Jean Dupont, fils de Pierre et Marie.',
    location: 'H√¥pital de Lyon',
    precise_date: true
  },
  {
    title: 'D√©m√©nagement √† Paris',
    date: '1960-01-01',
    description: 'La famille Dupont d√©m√©nage √† Paris pour le travail de Pierre.',
    location: 'Paris, France',
    precise_date: false
  },
  {
    title: 'Mariage de Jean et Sophie',
    date: '1975-08-15',
    description: 'Mariage de Jean Dupont et Sophie Moreau √† la mairie du 15√®me arrondissement.',
    location: 'Mairie du 15√®me, Paris',
    precise_date: true
  },
  {
    title: 'Ma naissance',
    date: '1980-04-22',
    description: 'Ma naissance √† l\'h√¥pital Saint-Antoine √† Paris.',
    location: 'H√¥pital Saint-Antoine, Paris',
    precise_date: true
  }
];

// Sample stories for testing
export const SAMPLE_STORIES: TestStory[] = [
  {
    title: 'Les recettes de Grand-m√®re Marie',
    content: `Grand-m√®re Marie √©tait r√©put√©e dans tout le quartier pour ses d√©licieuses tartes aux pommes. Elle avait un secret qu'elle ne r√©v√©lait qu'aux femmes de la famille : elle ajoutait toujours une pinc√©e de cannelle et un soup√ßon de rhum dans sa p√¢te.

Chaque dimanche, toute la famille se r√©unissait autour de sa grande table en ch√™ne pour d√©guster ses cr√©ations. L'odeur de ses g√¢teaux embaumait toute la maison et attirait m√™me les voisins qui trouvaient toujours une excuse pour passer "juste dire bonjour".

Cette tradition s'est perp√©tu√©e pendant des d√©cennies, et aujourd'hui encore, quand je sens l'odeur de la cannelle, je repense √† ces moments magiques pass√©s dans sa cuisine.`
  },
  {
    title: 'L\'histoire du m√©daillon familial',
    content: `Le m√©daillon en or que porte notre famille depuis des g√©n√©rations a une histoire fascinante. Il appartenait √† mon arri√®re-arri√®re-grand-m√®re, C√©lestine, qui l'avait re√ßu de sa propre m√®re avant de partir pour l'Am√©rique en 1890.

C√©lestine n'a finalement jamais fait le voyage, ayant rencontr√© l'amour de sa vie, mon arri√®re-arri√®re-grand-p√®re Auguste, juste avant son d√©part. Le m√©daillon est rest√© dans la famille et a √©t√© transmis de m√®re en fille depuis.

√Ä l'int√©rieur, on peut encore voir la petite photo de C√©lestine, √¢g√©e de 20 ans, avec ses longs cheveux bruns et son sourire malicieux. Ce m√©daillon repr√©sente pour nous le lien ind√©fectible entre les g√©n√©rations et l'importance de pr√©server notre histoire familiale.`
  },
  {
    title: 'Les √©t√©s √† la campagne',
    content: `Chaque √©t√© de mon enfance, nous partions chez l'oncle Marcel dans sa ferme en Normandie. C'√©tait un monde compl√®tement diff√©rent de notre vie parisienne : les r√©veils au chant du coq, la traite des vaches, la cueillette des pommes dans le verger.

Mon cousin Paul et moi passions nos journ√©es √† explorer les champs, √† construire des cabanes dans les arbres et √† p√™cher dans la petite rivi√®re qui traversait la propri√©t√©. Le soir, toute la famille se r√©unissait sur la terrasse pour √©couter les histoires d'oncle Marcel sur "le bon vieux temps".

Ces √©t√©s ont forg√© ma personnalit√© et m'ont appris l'importance de la nature et de la simplicit√©. Aujourd'hui, quand je sens l'odeur du foin coup√©, je suis imm√©diatement transport√© dans ces souvenirs d'enfance inoubliables.`
  }
];

// Authentication test functions
export const createTestUser = async (): Promise<{ success: boolean; message: string; user?: any }> => {
  try {
    console.log('üîÑ Creating test user...');
    
    // Try to sign up the test user
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: TEST_USER.email,
      password: TEST_USER.password,
      options: {
        data: {
          full_name: TEST_USER.displayName
        }
      }
    });

    if (signUpError) {
      // If user already exists, try to sign in
      if (signUpError.message === 'User already registered') {
        console.log('üë§ User already exists, attempting sign in...');
        
        const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
          email: TEST_USER.email,
          password: TEST_USER.password,
        });
        
        if (signInError) {
          return {
            success: false,
            message: `Erreur de connexion: ${signInError.message}`
          };
        }
        
        return {
          success: true,
          message: 'Utilisateur test connect√© avec succ√®s (existait d√©j√†)',
          user: signInData.user
        };
      }
      
      return {
        success: false,
        message: `Erreur lors de la cr√©ation: ${signUpError.message}`
      };
    }

    return {
      success: true,
      message: 'Utilisateur test cr√©√© avec succ√®s',
      user: signUpData.user
    };
  } catch (error) {
    console.error('Error creating test user:', error);
    return {
      success: false,
      message: `Erreur inattendue: ${error instanceof Error ? error.message : 'Erreur inconnue'}`
    };
  }
};

export const signInTestUser = async (): Promise<{ success: boolean; message: string; user?: any }> => {
  try {
    console.log('üîÑ Signing in test user...');
    
    const { data, error } = await supabase.auth.signInWithPassword({
      email: TEST_USER.email,
      password: TEST_USER.password,
    });
    
    if (error) {
      return {
        success: false,
        message: `Erreur de connexion: ${error.message}`
      };
    }
    
    return {
      success: true,
      message: 'Connexion r√©ussie',
      user: data.user
    };
  } catch (error) {
    console.error('Error signing in test user:', error);
    return {
      success: false,
      message: `Erreur inattendue: ${error instanceof Error ? error.message : 'Erreur inconnue'}`
    };
  }
};

export const createSampleEvents = async (): Promise<{ success: boolean; message: string; count?: number }> => {
  try {
    console.log('üîÑ Creating sample events...');
    
    // Get current user
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    if (userError || !user) {
      return {
        success: false,
        message: 'Utilisateur non connect√©'
      };
    }

    // Insert sample events
    const eventsToInsert = SAMPLE_EVENTS.map(event => ({
      ...event,
      created_by: user.id
    }));

    const { data, error } = await supabase
      .from('events')
      .insert(eventsToInsert)
      .select();

    if (error) {
      return {
        success: false,
        message: `Erreur lors de la cr√©ation des √©v√©nements: ${error.message}`
      };
    }

    return {
      success: true,
      message: `${data?.length || 0} √©v√©nements cr√©√©s avec succ√®s`,
      count: data?.length || 0
    };
  } catch (error) {
    console.error('Error creating sample events:', error);
    return {
      success: false,
      message: `Erreur inattendue: ${error instanceof Error ? error.message : 'Erreur inconnue'}`
    };
  }
};

export const createSampleStories = async (): Promise<{ success: boolean; message: string; count?: number }> => {
  try {
    console.log('üîÑ Creating sample stories...');
    
    // Get current user
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    if (userError || !user) {
      return {
        success: false,
        message: 'Utilisateur non connect√©'
      };
    }

    // Insert sample stories
    const storiesToInsert = SAMPLE_STORIES.map(story => ({
      ...story,
      created_by: user.id
    }));

    const { data, error } = await supabase
      .from('stories')
      .insert(storiesToInsert)
      .select();

    if (error) {
      return {
        success: false,
        message: `Erreur lors de la cr√©ation des r√©cits: ${error.message}`
      };
    }

    return {
      success: true,
      message: `${data?.length || 0} r√©cits cr√©√©s avec succ√®s`,
      count: data?.length || 0
    };
  } catch (error) {
    console.error('Error creating sample stories:', error);
    return {
      success: false,
      message: `Erreur inattendue: ${error instanceof Error ? error.message : 'Erreur inconnue'}`
    };
  }
};

export const runFullTest = async (): Promise<{ success: boolean; message: string; details: string[] }> => {
  const details: string[] = [];
  
  try {
    // Step 1: Create/Sign in test user
    const userResult = await createTestUser();
    details.push(`üë§ Utilisateur: ${userResult.message}`);
    
    if (!userResult.success) {
      return {
        success: false,
        message: '√âchec lors de la cr√©ation/connexion de l\'utilisateur test',
        details
      };
    }

    // Step 2: Create sample events
    const eventsResult = await createSampleEvents();
    details.push(`üìÖ √âv√©nements: ${eventsResult.message}`);

    // Step 3: Create sample stories
    const storiesResult = await createSampleStories();
    details.push(`üìñ R√©cits: ${storiesResult.message}`);

    const allSuccess = userResult.success && eventsResult.success && storiesResult.success;
    
    return {
      success: allSuccess,
      message: allSuccess ? 'Test complet r√©ussi!' : 'Test partiellement r√©ussi',
      details
    };
  } catch (error) {
    console.error('Error running full test:', error);
    return {
      success: false,
      message: `Erreur lors du test: ${error instanceof Error ? error.message : 'Erreur inconnue'}`,
      details
    };
  }
};

export const cleanupTestData = async (): Promise<{ success: boolean; message: string }> => {
  try {
    console.log('üßπ Cleaning up test data...');
    
    // Get current user
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    if (userError || !user) {
      return {
        success: false,
        message: 'Utilisateur non connect√©'
      };
    }

    // Delete events created by test user
    const { error: eventsError } = await supabase
      .from('events')
      .delete()
      .eq('created_by', user.id);

    // Delete stories created by test user
    const { error: storiesError } = await supabase
      .from('stories')
      .delete()
      .eq('created_by', user.id);

    if (eventsError || storiesError) {
      return {
        success: false,
        message: `Erreur lors du nettoyage: ${eventsError?.message || storiesError?.message}`
      };
    }

    return {
      success: true,
      message: 'Donn√©es de test supprim√©es avec succ√®s'
    };
  } catch (error) {
    console.error('Error cleaning up test data:', error);
    return {
      success: false,
      message: `Erreur inattendue: ${error instanceof Error ? error.message : 'Erreur inconnue'}`
    };
  }
};
export const checkEmailExists = async (email: string): Promise<{ success: boolean; message: string; details: any }> => {
  try {
    console.log('üîç Checking if email exists:', email);
    
    // Method 1: Try to sign up with the email to see Supabase's response
    console.log('Method 1: Testing signup response...');
    const { data: signUpTest, error: signUpError } = await supabase.auth.signUp({
      email: email,
      password: 'temporary-test-password-123',
      options: {
        data: { full_name: 'Test User' }
      }
    });
    
    // Method 2: Check in auth.users table (this will show if user exists in Supabase Auth)
    console.log('Method 2: Checking auth.users table...');
    const { data: authData, error: authError } = await supabase.auth.admin.listUsers();
    
    let authUserExists = false;
    let authUserDetails = null;
    
    if (!authError && authData?.users) {
      const foundUser = authData.users.find(user => user.email === email);
      if (foundUser) {
        authUserExists = true;
        authUserDetails = {
          id: foundUser.id,
          email: foundUser.email,
          created_at: foundUser.created_at,
          email_confirmed_at: foundUser.email_confirmed_at,
          last_sign_in_at: foundUser.last_sign_in_at
        };
      }
    }
    
    // Method 3: Check in profiles table
    console.log('Method 3: Checking profiles table...');
    const { data: profileData, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .limit(100); // Get all profiles to check
    
    let profileExists = false;
    let profileDetails = null;
    
    if (!profileError && profileData) {
      // We can't directly query by email in profiles, so we check all profiles
      // and match with auth user data
      if (authUserDetails) {
        const foundProfile = profileData.find(profile => profile.id === authUserDetails.id);
        if (foundProfile) {
          profileExists = true;
          profileDetails = foundProfile;
        }
      }
    }
    
    // Method 4: Try to get user by email using auth admin (if available)
    console.log('Method 4: Trying auth admin getUserByEmail...');
    let adminUserCheck = null;
    let adminError = null;
    try {
      // This might not work depending on permissions, but let's try
      const { data: adminData, error: adminErr } = await supabase.auth.admin.getUserByEmail(email);
      adminUserCheck = adminData;
      adminError = adminErr;
    } catch (err) {
      adminError = err;
    }
    
    const details = {
      email,
      // Method 1 results
      signUpTestError: signUpError?.message,
      signUpTestCode: signUpError?.code || signUpError?.status,
      signUpTestUser: signUpTest?.user ? {
        id: signUpTest.user.id,
        email: signUpTest.user.email,
        created_at: signUpTest.user.created_at
      } : null,
      // Method 2 results
      authUserExists,
      authUserDetails,
      // Method 3 results
      profileExists,
      profileDetails,
      // Method 4 results
      adminUserCheck: adminUserCheck?.user ? {
        id: adminUserCheck.user.id,
        email: adminUserCheck.user.email,
        created_at: adminUserCheck.user.created_at
      } : null,
      adminError: adminError?.message,
      // Errors
      authError: authError?.message,
      profileError: profileError?.message,
      totalProfiles: profileData?.length || 0
    };
    
    let message = `Email ${email}:\n`;
    message += `- SignUp Test Response: ${signUpError ? `ERROR: ${signUpError.message} (${signUpError.code})` : 'SUCCESS (user created or already exists)'}\n`;
    message += `- Existe dans auth.users: ${authUserExists ? 'OUI' : 'NON'}\n`;
    message += `- Existe dans profiles: ${profileExists ? 'OUI' : 'NON'}\n`;
    message += `- Admin check: ${adminUserCheck ? 'FOUND' : 'NOT FOUND'}\n`;
    message += `- Total profils dans la DB: ${details.totalProfiles}`;
    
    if (authError) {
      message += `\n- Erreur auth: ${authError.message}`;
    }
    
    if (adminError) {
      message += `\n- Erreur admin: ${adminError.message}`;
    }
    
    // If signup failed with user_already_exists, but we can't find the user, that's the issue
    if (signUpError?.message === 'User already registered' && !authUserExists && !adminUserCheck) {
      message += `\n\n‚ö†Ô∏è  PROBL√àME IDENTIFI√â: Supabase Auth dit que l'utilisateur existe, mais il n'est visible nulle part!`;
      message += `\n   Cela peut √™tre d√ª √†:`;
      message += `\n   1. Un utilisateur supprim√© de fa√ßon incompl√®te`;
      message += `\n   2. Un probl√®me de cache Supabase`;
      message += `\n   3. Des permissions insuffisantes pour voir l'utilisateur`;
    }
    
    return {
      success: true,
      message,
      details
    };
  } catch (error) {
    console.error('Error checking email:', error);
    return {
      success: false,
      message: `Erreur lors de la v√©rification: ${error instanceof Error ? error.message : 'Erreur inconnue'}`,
      details: { error: error instanceof Error ? error.message : 'Erreur inconnue' }
    };
  }
};

export const listAllUsers = async (): Promise<{ success: boolean; message: string; details: any }> => {
  try {
    console.log('üìã Listing all users...');
    
    // Get all auth users
    const { data: authData, error: authError } = await supabase.auth.admin.listUsers();
    
    // Get all profiles
    const { data: profileData, error: profileError } = await supabase
      .from('profiles')
      .select('*');
    
    const details = {
      authUsers: authData?.users || [],
      profiles: profileData || [],
      authError: authError?.message,
      profileError: profileError?.message,
      authUserCount: authData?.users?.length || 0,
      profileCount: profileData?.length || 0
    };
    
    let message = `Utilisateurs dans la base de donn√©es:\n`;
    message += `- Auth users: ${details.authUserCount}\n`;
    message += `- Profiles: ${details.profileCount}\n`;
    
    if (details.authUsers.length > 0) {
      message += `\nAuth users:\n`;
      details.authUsers.forEach((user: any, index: number) => {
        message += `  ${index + 1}. ${user.email} (ID: ${user.id.substring(0, 8)}...)\n`;
      });
    }
    
    if (details.profiles.length > 0) {
      message += `\nProfiles:\n`;
      details.profiles.forEach((profile: any, index: number) => {
        message += `  ${index + 1}. ${profile.full_name || 'Sans nom'} (ID: ${profile.id.substring(0, 8)}...)\n`;
      });
    }
    
    if (authError) {
      message += `\nErreur auth: ${authError.message}`;
    }
    
    if (profileError) {
      message += `\nErreur profiles: ${profileError.message}`;
    }
    
    return {
      success: true,
      message,
      details
    };
  } catch (error) {
    console.error('Error listing users:', error);
    return {
      success: false,
      message: `Erreur lors de la r√©cup√©ration des utilisateurs: ${error instanceof Error ? error.message : 'Erreur inconnue'}`,
      details: { error: error instanceof Error ? error.message : 'Erreur inconnue' }
    };
  }
};